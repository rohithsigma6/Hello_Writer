name: Production Monorepo Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build_and_deploy_job:
    runs-on: ubuntu-latest
    name: Build and Deploy Job
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Add Missing Babel Plugin
        run: npm install --workspace=@screenplay-ink/script-writer --workspace=@screenplay-ink/web --save-dev @babel/plugin-proposal-private-property-in-object --force

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.PRODUCTION_SCRIPTWRITER_AWS_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install AWS CLI
        run: |
          python -m pip install --upgrade pip
          pip install awscli

      - name: Copy ${{ vars.PRODUCTION_SCRIPTWRITER_ENV_FILE }} from S3 for Scriptwriter
        run: |
          aws s3 cp s3://${{ vars.PRODUCTION_SW_ENV_S3_BUCKET }}/${{ vars.PRODUCTION_SCRIPTWRITER_ENV_FILE }} ./apps/script-writer/.env --region ${{ secrets.AWS_REGION }}
          cat ./apps/script-writer/.env

      - name: Copy ${{ vars.WEB_ENV_FILE }} from S3 for Web
        run: |
          aws s3 cp s3://${{ vars.PRODUCTION_SW_ENV_S3_BUCKET }}/${{ vars.WEB_ENV_FILE }} ./apps/web/.env --region ${{ secrets.AWS_REGION }}
          cat ./apps/web/.env

      - name: Copy ${{ vars.ADMIN_DASHBOARD_ENV_FILE }} from S3 for Admin Dashboard
        run: |
          aws s3 cp s3://${{ vars.ADMIN_SW_ENV_S3_BUCKET }}/${{ vars.ADMIN_DASHBOARD_ENV_FILE }} ./apps/admin-dashboard/.env --region ${{ secrets.AWS_REGION }}
          cat ./apps/admin-dashboard/.env


      - name: Install cross-env
        run: npm install -g cross-env

      # - name: Run Linting
      #   run: npm run lint --workspace=@screenplay-ink/script-writer --workspace=@screenplay-ink/web

      - name: Install dependencies (Editor)
        run: npm install --workspace=@screenplay-ink/editor --force

      - name: Building Files (Editor)
        env:
          NODE_ENV: production
          GENERATE_SOURCEMAP: false
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: |
           npm run build --workspace=@screenplay-ink/editor

      - name: Install dependencies (Scriptwriter)
        run: npm install --workspace=@screenplay-ink/script-writer --force

      - name: Install dependencies (Web)
        run: npm install --workspace=@screenplay-ink/web --force

      - name: Install dependencies (Admin Dashboard)
        run: npm install --workspace=@screenplay-ink/admin-dashboard --force


      - name: Building scriptwriter
        env:
          NODE_ENV: production
          GENERATE_SOURCEMAP: false
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: cross-env CI=false $(cat @screenplay-ink/script-writer/.env | xargs) npm run build-vite-only --workspace=@screenplay-ink/script-writer

      - name: Building Web
        env:
          NODE_ENV: production
          GENERATE_SOURCEMAP: false
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: cross-env CI=false $(cat ./apps/web/.env | xargs) npm run build --workspace=@screenplay-ink/web

      - name: Building Admin Dashboard
        env:
          NODE_ENV: production
          GENERATE_SOURCEMAP: false
          NODE_OPTIONS: "--max_old_space_size=4096"
        run: cross-env CI=false $(cat ./apps/admin-dashboard/.env | xargs) npm run build --workspace=@screenplay-ink/admin-dashboard

      - name: Upload Scriptwriter to S3
        run:  |
          aws sts get-caller-identity
          aws s3 cp ./apps/script-writer/dist s3://${{ vars.SCRIPTWRITER_S3_BUCKET }} --recursive --region ${{ secrets.AWS_REGION }} --cache-control max-age=0

      - name: Upload Web to S3
        run:  |
          aws sts get-caller-identity
          aws s3 cp ./apps/web/out s3://${{ vars.WEB_S3_BUCKET }} --recursive --region ${{ secrets.AWS_REGION }} --cache-control max-age=0

      - name: Upload Admin Dashboard to S3
        run:  |
          aws sts get-caller-identity
          aws s3 cp ./apps/admin-dashboard/out s3://${{ vars.ADMIN_DASHBOARD_S3_BUCKET }} --recursive --region ${{ secrets.AWS_REGION }} --cache-control max-age=0


      - name: Invalidate CloudFront Cache for @screenplay-ink/script-writer
        run: aws cloudfront create-invalidation --distribution-id ${{ vars.SCRIPTWRITER_CLOUDFRONT_ID }} --paths "/*"

      - name: Invalidate CloudFront Cache for Web
        run: aws cloudfront create-invalidation --distribution-id ${{ vars.WEB_CLOUDFRONT_ID }} --paths "/*"

      - name: Invalidate CloudFront Cache for Admin Dashboard
        run: aws cloudfront create-invalidation --distribution-id ${{ vars.ADMIN_DASHBOARD_CLOUDFRONT_ID }} --paths "/*"


  build_and_deploy_backend:
    runs-on: ubuntu-latest
    name: Build and Deploy Backend
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ secrets.PRODUCTION_SERVER_AWS_IAM_ROLE }}
          aws-region: ${{ secrets.AWS_SERVER_REGION }}

      - name: Copy ${{ vars.PRODUCTION_SERVER_ENV_FILE }} from S3
        run: |
          aws s3 cp s3://${{ vars.PRODUCTION_SERVER_ENV_S3_BUCKET }}/${{ vars.PRODUCTION_SERVER_ENV_FILE }} ./apps/server/.env.production --region ${{ secrets.AWS_REGION }}
          cat ./apps/server/.env.production

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get Git Commit Hash
        id: git-commit
        run: echo "COMMIT_HASH=$(git log -1 --pretty=format:'%h')" >> $GITHUB_ENV

      - name: Get Branch Name
        id: get-branch
        run: echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Delete Old Images with Same Branch Name
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.PRODUCTION_ECR_REPOSITORY }}
          BRANCH_NAME: ${{ env.BRANCH_NAME }}
        run: |
          aws ecr list-images --repository-name $ECR_REPOSITORY --query 'imageIds[*]' --output json > image_ids.json
          OLD_IMAGE_IDS=$(jq -r '.[] | select(.imageTag != null and (.imageTag | type == "string") and (.imageTag | startswith(env.BRANCH_NAME + "-"))) | @base64' image_ids.json)
          for image_id in $OLD_IMAGE_IDS; do
            image_digest=$(echo $image_id | base64 --decode | jq -r '.imageDigest')
            image_tag=$(echo $image_id | base64 --decode | jq -r '.imageTag')
            if [[ $image_tag =~ ^${BRANCH_NAME}-[a-z0-9]{7}$ ]]; then
              aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --image-ids imageDigest=$image_digest
            fi
          done

      - name: Build, Tag, and Push The Image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.PRODUCTION_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./apps/server/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Install jq
        run: sudo apt-get install -y jq
  
      - name: Update ECS Task Definition
        id: update-task-def
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.PRODUCTION_ECR_REPOSITORY }}
          IMAGE_TAG: ${{ env.BRANCH_NAME }}-${{ env.COMMIT_HASH }}
          TASK_DEFINITION: ${{ vars.PRODUCTION_TASK_DEFINITION }}
        run: |
          CURRENT_TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query 'taskDefinition')
          NEW_TASK_DEF=$(echo $CURRENT_TASK_DEF | jq --arg IMAGE "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" '
            .containerDefinitions[0].image = $IMAGE |
            del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          echo $NEW_TASK_DEF > new-task-def.json
          aws ecs register-task-definition --cli-input-json file://new-task-def.json

      - name: Update ECS Service
        env:
          CLUSTER_NAME: ${{ vars.PRODUCTION_CLUSTER_NAME }}
          SERVICE_NAME: ${{ vars.PRODUCTION_SERVICE_NAME }}
          TASK_DEFINITION: ${{ vars.PRODUCTION_TASK_DEFINITION }}
        run: |
          NEW_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query 'taskDefinition.taskDefinitionArn' --output text)
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEF_ARN
